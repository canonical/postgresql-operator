# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

"""Cluster topology changes observer."""

import json
import subprocess
import sys
from asyncio import as_completed, get_running_loop, run, wait
from contextlib import suppress
from ssl import CERT_NONE, create_default_context
from time import sleep
from urllib.parse import urljoin
from urllib.request import urlopen

API_REQUEST_TIMEOUT = 5
PATRONI_CLUSTER_STATUS_ENDPOINT = "cluster"
TLS_CA_BUNDLE_FILE = "peer_ca_bundle.pem"
SNAP_CURRENT_PATH = "/var/snap/charmed-postgresql/current"
SNAP_CONF_PATH = f"{SNAP_CURRENT_PATH}/etc"
PATRONI_CONF_PATH = f"{SNAP_CONF_PATH}/patroni"

# File path for the spawned cluster topology observer process to write logs.
LOG_FILE_PATH = "/var/log/cluster_topology_observer.log"


class UnreachableUnitsError(Exception):
    """Cannot reach any known cluster member."""


def call_url(url, context):
    """Task handler for calling an url."""
    try:
        # Scheme is generated by the charm
        resp = urlopen(  # noqa: S310
            url,
            timeout=API_REQUEST_TIMEOUT,
            context=context,
        )
        return json.loads(resp.read())
    except Exception as e:
        print(f"Failed to contact {url} with {e}")


def dispatch(run_cmd, unit, charm_dir):
    """Use the input juju-run command to dispatch a :class:`ClusterTopologyChangeEvent`."""
    dispatch_sub_cmd = "JUJU_DISPATCH_PATH=hooks/cluster_topology_change {}/dispatch"
    # Input is generated by the charm
    subprocess.run([run_cmd, "-u", unit, dispatch_sub_cmd.format(charm_dir)])  # noqa: S603


async def main():
    """Main watch and dispatch loop.

    Watch the Patroni API cluster info. When changes are detected, dispatch the change event.
    """
    patroni_urls, run_cmd, unit, charm_dir = sys.argv[1:]

    previous_cluster_topology = {}
    urls = [urljoin(url, PATRONI_CLUSTER_STATUS_ENDPOINT) for url in patroni_urls.split(",")]
    member_name = unit.replace("/", "-")
    while True:
        # Disable TLS chain verification
        context = create_default_context()
        with suppress(FileNotFoundError):
            context.load_verify_locations(cafile=f"{PATRONI_CONF_PATH}/{TLS_CA_BUNDLE_FILE}")
        context.check_hostname = False
        context.verify_mode = CERT_NONE

        cluster_status = None
        loop = get_running_loop()
        tasks = [loop.run_in_executor(None, call_url, url, context) for url in urls]
        for task in as_completed(tasks):
            if result := await task:
                for task in tasks:
                    task.cancel()
                await wait(tasks)
                cluster_status = result
                break
        if not cluster_status:
            raise UnreachableUnitsError("Unable to reach cluster members")
        current_cluster_topology = {}
        urls = []
        for member in cluster_status["members"]:
            current_cluster_topology[member["name"]] = member["role"]
            member_url = urljoin(member["api_url"], PATRONI_CLUSTER_STATUS_ENDPOINT)
            # Call the current unit first
            if member["name"] == member_name:
                urls.insert(0, member_url)
            else:
                urls.append(member_url)

        # If it's the first time the cluster topology was retrieved, then store it and use
        # it for subsequent checks.
        if not previous_cluster_topology:
            previous_cluster_topology = current_cluster_topology
        # If the cluster topology changed, dispatch a charm event to handle this change.
        elif current_cluster_topology != previous_cluster_topology:
            previous_cluster_topology = current_cluster_topology
            dispatch(run_cmd, unit, charm_dir)

        # Wait some time before checking again for a cluster topology change.
        sleep(30)


if __name__ == "__main__":
    run(main())
