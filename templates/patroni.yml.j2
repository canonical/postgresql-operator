#########################################################################################
# [ WARNING ]
# patroni configuration file maintained by the postgres-operator
# local changes may be overwritten.
#########################################################################################
# For a complete reference of all the options for this configuration file,
# please refer to https://patroni.readthedocs.io/en/latest/SETTINGS.html.

# Name of the cluster.
scope: {{ scope }}
namespace: /db/
name: {{ member_name }}

log:
  dir: {{ log_path }}

restapi:
  listen: '{{ self_ip }}:8008'
  connect_address: '{{ self_ip }}:8008'
  {%- if enable_tls %}
  cafile: {{ conf_path }}/ca.pem
  certfile: {{ conf_path }}/cert.pem
  keyfile: {{ conf_path }}/key.pem
  {%- endif %}

{%- if enable_tls %}
ctl:
  cacert: {{ conf_path }}/ca.pem
  certfile: {{ conf_path }}/cert.pem
  keyfile: {{ conf_path }}/key.pem
{%- endif %}

raft:
  data_dir: {{ conf_path }}/raft
  self_addr: '{{ self_ip }}:2222'
  {% if peers_ips -%}
  partner_addrs:
  {% endif -%}
  {% for peer_ip in peers_ips -%}
  - {{ peer_ip }}:2222
  {% endfor %}

bootstrap:
  dcs:
    # Settings related to the time without communication
    # to the leader before triggering a failover.
    ttl: 30
    loop_wait: 10
    retry_timeout: 10
    maximum_lag_on_failover: 1048576
    synchronous_mode: true
    synchronous_node_count: {{ minority_count }}
    postgresql:
      use_pg_rewind: true
      remove_data_directory_on_rewind_failure: true
      remove_data_directory_on_diverged_timelines: true
      parameters:
        synchronous_commit: on
        synchronous_standby_names: "*"
        {%- if enable_pgbackrest %}
        archive_command: 'pgbackrest {{ pgbackrest_configuration_file }} --stanza={{ stanza }} archive-push %p'
        {% else %}
        archive_command: /bin/true
        {%- endif %}
        archive_mode: on
        wal_level: logical

  {%- if restoring_backup %}
  method: pgbackrest
  pgbackrest:
    command: pgbackrest {{ pgbackrest_configuration_file }} --stanza={{ restore_stanza }} --pg1-path={{ data_path }} --set={{ backup_id }} --type=immediate --target-action=promote restore
    no_params: True
    keep_existing_recovery_conf: True
  {% else %}
  initdb:
  - encoding: UTF8
  - data-checksums
  {%- endif %}

postgresql:
  listen: '{{ self_ip }}:5432'
  connect_address: '{{ self_ip }}:5432'
  # Path to PostgreSQL binaries used in the database bootstrap process.
  bin_dir: /snap/charmed-postgresql/current/usr/lib/postgresql/{{ version }}/bin
  data_dir: {{ data_path }}
  parameters:
    {%- if enable_pgbackrest %}
    archive_command: 'pgbackrest {{ pgbackrest_configuration_file }} --stanza={{ stanza }} archive-push %p'
    {% else %}
    archive_command: /bin/true
    {%- endif %}
    {%- if enable_tls %}
    ssl: on
    ssl_ca_file: {{ conf_path }}/ca.pem
    ssl_cert_file: {{ conf_path }}/cert.pem
    ssl_key_file: {{ conf_path }}/key.pem
    {%- endif %}
    unix_socket_directories: /tmp
  pgpass: /tmp/pgpass
  pg_hba:
    - local all backup peer map=operator
    - local all operator scram-sha-256
    - local all monitoring password
    {%- if not connectivity %}
    - {{ 'hostssl' if enable_tls else 'host' }} all all 0.0.0.0/0 reject
    - {{ 'hostssl' if enable_tls else 'host' }} all all {{ self_ip }} md5
    {% else %}
    - {{ 'hostssl' if enable_tls else 'host' }} replication replication 127.0.0.1/32 md5
    {%- endif %}
    - {{ 'hostssl' if enable_tls else 'host' }} all all 0.0.0.0/0 md5
    # Allow replications connections from other cluster members.
    {%- for peer_ip in peers_ips %}
    - {{ 'hostssl' if enable_tls else 'host' }}     replication    replication    {{ peer_ip }}/0    md5
    {% endfor %}
  pg_ident:
  - operator snap_daemon backup
  authentication:
    replication:
      username: replication
      password: {{ replication_password }}
    rewind:
      username: {{ rewind_user }}
      password: {{ rewind_password }}
    superuser:
      username: {{ superuser }}
      password: {{ superuser_password }}
use_unix_socket: true
{%- if is_creating_backup %}
tags:
  is_creating_backup: {{ is_creating_backup }}
{%- endif %}
