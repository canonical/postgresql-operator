# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
no_package = True
skip_missing_interpreters = True
env_list = lint, unit

[vars]
src_path = {tox_root}/src
tests_path = {tox_root}/tests
;lib_path = {tox_root}/lib/charms/operator_name_with_underscores
all_path = {[vars]src_path} {[vars]tests_path}

[testenv]
set_env =
    PYTHONPATH = {tox_root}:{tox_root}/lib:{[vars]src_path}
    PYTHONBREAKPOINT=ipdb.set_trace
    PY_COLORS=1
pass_env =
    PYTHONPATH
    CHARM_BUILD_DIR
    MODEL_SETTINGS
    RESTART_MACHINE_TEST

[testenv:format]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_path}
    black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    flake8
    flake8-docstrings
    flake8-copyright
    flake8-builtins
    pyproject-flake8
    pep8-naming
    isort
    codespell
commands =
    codespell {tox_root}/*.yaml {tox_root}/*.ini {tox_root}/*.md \
      {tox_root}/*.toml {tox_root}/*.txt {tox_root}/.github
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path}
    isort --check-only --diff {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:unit]
description = Run unit tests
deps =
    jsonschema
    psycopg2-binary
    pytest
    pytest-asyncio
    coverage[toml]
    jinja2
    -r {tox_root}/requirements.txt
commands =
    coverage run --source={[vars]src_path} \
        -m pytest -v --tb native -s {posargs} {[vars]tests_path}/unit
    coverage report
    coverage xml

[testenv:charm-integration]
description = Run charm integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
deps =
    pytest
    juju~=2.9.0 # Latest juju 2
    landscape-api-py3
    mailmanclient
    pytest-operator
    psycopg2-binary
    -r {tox_root}/requirements.txt
commands =
    # Download patroni resource to use in the charm deployment.
    sh -c 'stat patroni.tar.gz > /dev/null 2>&1 || curl "https://github.com/zalando/patroni/archive/refs/tags/v2.1.4.tar.gz" -L -s > patroni.tar.gz'
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/test_charm.py
    # Remove the downloaded resource.
    sh -c 'rm -f patroni.tar.gz'
allowlist_externals =
    sh

[testenv:database-relation-integration]
description = Run database relation integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
deps =
    pytest
    juju~=2.9.0 # Latest juju 2
    landscape-api-py3
    mailmanclient
    pytest-operator
    psycopg2-binary
    -r {tox_root}/requirements.txt
commands =
    # Download patroni resource to use in the charm deployment.
    sh -c 'stat patroni.tar.gz > /dev/null 2>&1 || curl "https://github.com/zalando/patroni/archive/refs/tags/v2.1.4.tar.gz" -L -s > patroni.tar.gz'
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/new_relations/test_new_relations.py
    # Remove the downloaded resource.
    sh -c 'rm -f patroni.tar.gz'
allowlist_externals =
    sh

[testenv:db-relation-integration]
description = Run db relation integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
deps =
    pytest
    juju~=2.9.0 # Latest juju 2
    landscape-api-py3
    mailmanclient
    pytest-operator
    psycopg2-binary
    -r {tox_root}/requirements.txt
commands =
    # Download patroni resource to use in the charm deployment.
    sh -c 'stat patroni.tar.gz > /dev/null 2>&1 || curl "https://github.com/zalando/patroni/archive/refs/tags/v2.1.4.tar.gz" -L -s > patroni.tar.gz'
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/test_db.py
    # Remove the downloaded resource.
    sh -c 'rm -f patroni.tar.gz'
allowlist_externals =
    sh

[testenv:db-admin-relation-integration]
description = Run db-admin relation integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
deps =
    pytest
    juju~=2.9.0 # Latest juju 2
    landscape-api-py3
    mailmanclient
    pytest-operator
    psycopg2-binary
    -r {tox_root}/requirements.txt
commands =
    # Download patroni resource to use in the charm deployment.
    sh -c 'stat patroni.tar.gz > /dev/null 2>&1 || curl "https://github.com/zalando/patroni/archive/refs/tags/v2.1.4.tar.gz" -L -s > patroni.tar.gz'
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/test_db_admin.py
    # Remove the downloaded resource.
    sh -c 'rm -f patroni.tar.gz'
allowlist_externals =
    sh

[testenv:ha-self-healing-integration]
description = Run high availability self healing integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
deps =
    pytest
    juju~=2.9.0 # Latest juju 2
    landscape-api-py3
    mailmanclient
    pytest-operator
    psycopg2-binary
    -r {tox_root}/requirements.txt
commands =
    # Download patroni resource to use in the charm deployment.
    sh -c 'stat patroni.tar.gz > /dev/null 2>&1 || curl "https://github.com/zalando/patroni/archive/refs/tags/v2.1.4.tar.gz" -L -s > patroni.tar.gz'
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/ha_tests/test_self_healing.py
    # Remove the downloaded resource.
    sh -c 'rm -f patroni.tar.gz'
allowlist_externals =
    sh

[testenv:password-rotation-integration]
description = Run password rotation integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
deps =
    pytest
    juju~=2.9.0 # Latest juju 2
    landscape-api-py3
    mailmanclient
    pytest-operator
    psycopg2-binary
    -r {tox_root}/requirements.txt
commands =
    # Download patroni resource to use in the charm deployment.
    sh -c 'stat patroni.tar.gz > /dev/null 2>&1 || curl "https://github.com/zalando/patroni/archive/refs/tags/v2.1.4.tar.gz" -L -s > patroni.tar.gz'
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/test_password_rotation.py
    # Remove the downloaded resource.
    sh -c 'rm -f patroni.tar.gz'
allowlist_externals =
    sh

[testenv:tls-integration]
description = Run TLS integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
deps =
    pytest
    juju~=2.9.0 # Latest juju 2
    landscape-api-py3
    mailmanclient
    pytest-operator
    psycopg2-binary
    -r {tox_root}/requirements.txt
commands =
    # Download patroni resource to use in the charm deployment.
    sh -c 'stat patroni.tar.gz > /dev/null 2>&1 || curl "https://github.com/zalando/patroni/archive/refs/tags/v2.1.4.tar.gz" -L -s > patroni.tar.gz'
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/test_tls.py
    # Remove the downloaded resource.
    sh -c 'rm -f patroni.tar.gz'
allowlist_externals =
    sh

[testenv:integration]
description = Run all integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
deps =
    pytest
    juju~=2.9.0 # Latest juju 2
    landscape-api-py3
    mailmanclient
    pytest-operator
    psycopg2-binary
    -r {tox_root}/requirements.txt
commands =
    # Download patroni resource to use in the charm deployment.
    sh -c 'stat patroni.tar.gz > /dev/null 2>&1 || curl "https://github.com/zalando/patroni/archive/refs/tags/v2.1.4.tar.gz" -L -s > patroni.tar.gz'
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/
    # Remove the downloaded resource.
    sh -c 'rm -f patroni.tar.gz'
allowlist_externals =
    sh
