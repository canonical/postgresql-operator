# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

"""Cluster topology changes observer."""

import logging
import os
import signal
import subprocess

from ops.charm import CharmBase, CharmEvents
from ops.framework import EventBase, EventSource, Object
from ops.model import ActiveStatus

logger = logging.getLogger(__name__)

# File path for the spawned cluster topology observer process to write logs.
LOG_FILE_PATH = "/var/log/cluster_topology_observer.log"


class ClusterTopologyChangeEvent(EventBase):
    """A custom event for cluster topology changes."""


class AuthorisationRulesChangeEvent(EventBase):
    """A custom event for authorisation rules changes."""


class DatabasesChangeEvent(EventBase):
    """A custom event for databases changes."""


class ClusterTopologyChangeCharmEvents(CharmEvents):
    """A CharmEvents extension for cluster topology changes.

    Includes :class:`ClusterTopologyChangeEvent` in those that can be handled.
    """

    authorisation_rules_change = EventSource(AuthorisationRulesChangeEvent)
    cluster_topology_change = EventSource(ClusterTopologyChangeEvent)
    databases_change = EventSource(DatabasesChangeEvent)


class ClusterTopologyObserver(Object):
    """Observes changing topology in the cluster.

    Observed cluster topology changes cause :class"`ClusterTopologyChangeEvent` to be emitted.
    """

    def __init__(self, charm: CharmBase, run_cmd: str):
        """Constructor for ClusterTopologyObserver.

        Args:
            charm: the charm that is instantiating the library.
            run_cmd: run command to use to dispatch events.
        """
        super().__init__(charm, "cluster-topology-observer")

        self._charm = charm
        self._run_cmd = run_cmd

    def start_observer(self):
        """Start the cluster topology observer running in a new process."""
        if not isinstance(self._charm.unit.status, ActiveStatus) or self._charm._peers is None:
            return
        if "observer-pid" in self._charm._peers.data[self._charm.unit]:
            # Double check that the PID exists
            pid = int(self._charm._peers.data[self._charm.unit]["observer-pid"])
            try:
                os.kill(pid, 0)
                return
            except OSError:
                pass

        logging.info("Starting cluster topology observer process")

        # We need to trick Juju into thinking that we are not running
        # in a hook context, as Juju will disallow use of juju-run.
        new_env = os.environ.copy()
        if "JUJU_CONTEXT_ID" in new_env:
            new_env.pop("JUJU_CONTEXT_ID")

        urls = [self._charm._patroni._patroni_url] + [
            self._charm._patroni._patroni_url.replace(self._charm._patroni.unit_ip, peer)
            for peer in list(self._charm._patroni.peers_ips)
        ]

        # Input is generated by the charm
        pid = subprocess.Popen(  # noqa: S603
            [
                "/usr/bin/python3",
                "scripts/cluster_topology_observer.py",
                ",".join(urls),
                self._run_cmd,
                self._charm.unit.name,
                self._charm.charm_dir,
            ],
            # File shouldn't close
            stdout=open(LOG_FILE_PATH, "a"),  # noqa: SIM115
            stderr=subprocess.STDOUT,
            env=new_env,
        ).pid

        self._charm._peers.data[self._charm.unit].update({"observer-pid": f"{pid}"})
        logging.info(f"Started cluster topology observer process with PID {pid}")

    def stop_observer(self):
        """Stop the running observer process if we have previously started it."""
        if (
            self._charm._peers is None
            or "observer-pid" not in self._charm._peers.data[self._charm.unit]
        ):
            return

        observer_pid = int(self._charm._peers.data[self._charm.unit].get("observer-pid"))

        try:
            os.kill(observer_pid, signal.SIGINT)
            msg = "Stopped running cluster topology observer process with PID {}"
            logging.info(msg.format(observer_pid))
            self._charm._peers.data[self._charm.unit].update({"observer-pid": ""})
        except OSError:
            pass
