"DESCRIPTION","DURATION IN MS","NAME","PARENT SUITE","START TIME","STATUS","STOP TIME","SUB SUITE","SUITE","TEST CLASS","TEST METHOD"
"","","test_freeze_db_process[postgres]","tests.integration.ha_tests","","unknown","","","test_self_healing","",""
"Simple test to ensure that the PostgreSQL and application charms get deployed.","","test_deploy_latest","tests.integration.ha_tests","","unknown","","","test_upgrade","",""
"Test that the pre-upgrade-check action runs successfully.","","test_pre_upgrade_check","tests.integration.ha_tests","","unknown","","","test_upgrade_from_stable","",""
"Test that relation data, like connection data, is updated correctly when scaling.","","test_relation_data_is_updated_correctly_when_scaling","tests.integration","","unknown","","","test_db","",""
"","","test_freeze_db_process[/snap/charmed-postgresql/[0-9]*/usr/bin/patroni]","tests.integration.ha_tests","","unknown","","","test_self_healing","",""
"Build the charm and deploy it.","","test_deploy_active","tests.integration","","unknown","","","test_password_rotation","",""
"","","test_settings_are_correct[0]","tests.integration","","unknown","","","test_charm","",""
"Check that writes in one cluster are not replicated to another cluster.","","test_no_data_replicated_between_clusters","tests.integration.ha_tests","","unknown","","","test_replication","",""
"Build and deploy one unit of PostgreSQL and then test config with wrong parameters.","","test_config_parameters","tests.integration","","unknown","","","test_config","",""
"","","test_roles_blocking","tests.integration","","unknown","","","test_db","",""
"","","test_removing_unit[roles2]","tests.integration.ha_tests","","unknown","","","test_scaling_three_units_async","",""
"","","test_settings_are_correct[2]","tests.integration","","unknown","","","test_charm","",""
"Test that there is no read-only endpoint in a standalone cluster.","","test_primary_read_only_endpoint_in_standalone_cluster","tests.integration.new_relations","","unknown","","","test_new_relations_1","",""
"","","test_get_data_integrator_credentials","tests.integration.ha_tests","","unknown","","","test_async_replication","",""
"Build and deploy two PostgreSQL clusters.","","test_build_and_deploy","tests.integration.ha_tests","","unknown","","","test_synchronous_policy","",""
"Deploy the charm-under-test.

    Assert on the unit status before any relations/configurations take place.
    ","","test_deploy","tests.integration","","unknown","","","test_charm","",""
"","","test_removing_raft_majority","tests.integration.ha_tests","","unknown","","","test_scaling","",""
"Checking if password is same as returned by CLI.

    I.e. we're manipulating the secret we think we're manipulating.
    ","","test_password_from_secret_same_as_cli","tests.integration","","unknown","","","test_password_rotation","",""
"","","test_modern_endpoint_with_multiple_related_endpoints","tests.integration.relations","","unknown","","","test_relations","",""
"","","test_removing_stereo_sync_standby","tests.integration.ha_tests","","unknown","","","test_scaling","",""
"Test the audit plugin.","","test_audit_plugin","tests.integration","","unknown","","","test_audit","",""
"","","test_database_is_up[2]","tests.integration","","unknown","","","test_charm","",""
"","","test_scale_to_five_units","tests.integration.ha_tests","","unknown","","","test_scaling","",""
"Build and deploy two PostgreSQL clusters.","","test_build_and_deploy","tests.integration.ha_tests","","unknown","","","test_scaling","",""
"Test promoting the standby cluster.","","test_promote_standby","tests.integration.ha_tests","","unknown","","","test_async_replication","",""
"Test that the relation can be broken and re-established.","","test_reestablish_relation","tests.integration.ha_tests","","unknown","","","test_async_replication","",""
"","","test_default_all","tests.integration.ha_tests","","unknown","","","test_synchronous_policy","",""
"Test superuser actions and the request for more permissions.","","test_user_with_extra_roles","tests.integration.new_relations","","unknown","","","test_new_relations_1","",""
"Write to primary, read data from secondaries (check consistency).","","test_consistency","tests.integration.ha_tests","","unknown","","","test_replication","",""
"Test that user can't connect with empty password.","","test_db_connection_with_empty_password","tests.integration","","unknown","","","test_password_rotation","",""
"","","test_legacy_endpoint_with_multiple_related_endpoints","tests.integration.relations","","unknown","","","test_relations","",""
"Build and deploy two PostgreSQL cluster in two separate models to test async replication.","","test_deploy_async_replication_setup","tests.integration.ha_tests","","unknown","","","test_async_replication","",""
"Build and deploy two PostgreSQL clusters.","","test_build_and_deploy","tests.integration.ha_tests","","unknown","","","test_restore_cluster","",""
"Test that an application can connect to different clusters of the same database.","","test_an_application_can_connect_to_multiple_aliased_database_clusters","tests.integration.new_relations","","unknown","","","test_new_relations_1","",""
"","","test_scale_up","tests.integration","","unknown","","","test_subordinates","",""
"","","test_exporter_is_up[1]","tests.integration","","unknown","","","test_charm","",""
"Deploy Landscape Scalable Bundle to test the 'db-admin' relation.","","test_landscape_scalable_bundle_db","tests.integration","","unknown","","","test_db_admin","",""
"Build and deploy two PostgreSQL clusters.","","test_build_and_deploy","tests.integration.ha_tests","","unknown","","","test_scaling_three_units_async","",""
"Deploy both charms (application and database) to use in the tests.","","test_deploy_charms","tests.integration.new_relations","","unknown","","","test_new_relations_1","",""
"","","test_interruption_db_process[SIGKILL-/snap/charmed-postgresql/[0-9]*/usr/bin/patroni]","tests.integration.ha_tests","","unknown","","","test_self_healing","",""
"","","test_canonical_livepatch_onprem_bundle_db","tests.integration","","unknown","","","test_db","",""
"Checks if charm gets blocked when trying to disable a plugin in use.","","test_plugin_objects","tests.integration","","unknown","","","test_plugins","",""
"","","test_constant","tests.integration.ha_tests","","unknown","","","test_synchronous_policy","",""
"Test that passwords don't get exposed on postgresql logs.","","test_no_password_exposed_on_logs","tests.integration","","unknown","","","test_password_rotation","",""
"Test that an application can request additional databases using the same interface.","","test_an_application_can_request_multiple_databases","tests.integration.new_relations","","unknown","","","test_new_relations_1","",""
"Test password rotation action.","","test_password_rotation","tests.integration","","unknown","","","test_password_rotation","",""
"Test that the admin role gives access to all the databases.","","test_admin_role","tests.integration.new_relations","","unknown","","","test_new_relations_1","",""
"Test that there is read-only endpoint in a scaled up cluster.","","test_read_only_endpoint_in_scaled_up_cluster","tests.integration.new_relations","","unknown","","","test_new_relations_1","",""
"","","test_database_is_up[1]","tests.integration","","unknown","","","test_charm","",""
"","","test_extensions_blocking","tests.integration","","unknown","","","test_db","",""
"Test that check relation data.","","test_relations","tests.integration.new_relations","","unknown","","","test_relations_coherence","",""
"This tests checks that a cluster recovers from a full cluster restart.

    The test can be called a full cluster crash when the signal sent to the OS process
    is SIGKILL.
    ","","test_full_cluster_restart[SIGTERM-/snap/charmed-postgresql/[0-9]*/usr/bin/patroni]","tests.integration.ha_tests","","unknown","","","test_self_healing","",""
"","","test_removing_unit[roles3]","tests.integration.ha_tests","","unknown","","","test_scaling_three_units_async","",""
"Build and deploy two PostgreSQL clusters.","","test_build_and_deploy","tests.integration.ha_tests","","unknown","","","test_scaling_three_units","",""
"Remove unit with force while storage is alive.","","test_app_force_removal","tests.integration.ha_tests","","unknown","","","test_smoke","",""
"Test application deploy in dirty environment with garbage storage from another application.","","test_app_resources_conflicts_v3","tests.integration.ha_tests","","unknown","","","test_smoke","",""
"Build and deploy two units of PostgreSQL in GCP, test backup and restore actions.","","test_backup_gcp","tests.integration","","unknown","","","test_backups_gcp","",""
"Completely cut and restore network.","","test_network_cut","tests.integration.ha_tests","","unknown","","","test_self_healing","",""
"","","test_interruption_db_process[SIGTERM-postgres]","tests.integration.ha_tests","","unknown","","","test_self_healing","",""
"Test switching over to the second cluster.","","test_switchover","tests.integration.ha_tests","","unknown","","","test_async_replication","",""
"Test charm deploy in dirty environment with garbage storage.","","test_charm_garbage_ignorance","tests.integration.ha_tests","","unknown","","","test_smoke","",""
"Build and deploy three unit of PostgreSQL.","","test_build_and_deploy","tests.integration.ha_tests","","unknown","","","test_self_healing","",""
"Kill primary unit, check reelection.","","test_reelection","tests.integration.ha_tests","","unknown","","","test_replication","",""
"Build and deploy two units of PostgreSQL in microceph, test backup and restore actions.","","test_backup_ceph","tests.integration","","unknown","","","test_backups_ceph","",""
"Test that the password can't be set to an empty string.","","test_empty_password","tests.integration","","unknown","","","test_password_rotation","",""
"This tests checks that a cluster recovers from a full cluster restart.

    The test can be called a full cluster crash when the signal sent to the OS process
    is SIGKILL.
    ","","test_full_cluster_restart[SIGKILL-postgres]","tests.integration.ha_tests","","unknown","","","test_self_healing","",""
"Test basic functionality of database relation interface.","","test_database_relation_with_charm_libraries","tests.integration.new_relations","","unknown","","","test_new_relations_1","",""
"Test async replication between two PostgreSQL clusters.","","test_async_replication","tests.integration.ha_tests","","unknown","","","test_async_replication","",""
"","","test_removing_unit[roles1]","tests.integration.ha_tests","","unknown","","","test_scaling_three_units","",""
"","","test_removing_unit[roles0]","tests.integration.ha_tests","","unknown","","","test_scaling_three_units","",""
"","","test_scale_down","tests.integration","","unknown","","","test_subordinates","",""
"","","test_deploy","tests.integration","","unknown","","","test_subordinates","",""
"Test that in general, there is no change when password validation fails.","","test_no_password_change_on_invalid_password","tests.integration","","unknown","","","test_password_rotation","",""
"This tests checks that a cluster recovers from a full cluster restart.

    The test can be called a full cluster crash when the signal sent to the OS process
    is SIGKILL.
    ","","test_full_cluster_restart[SIGKILL-/snap/charmed-postgresql/[0-9]*/usr/bin/patroni]","tests.integration.ha_tests","","unknown","","","test_self_healing","",""
"","","test_postgresql_locales","tests.integration","","unknown","","","test_charm","",""
"Build and deploy one unit of PostgreSQL and then test the available plugins.","","test_plugins","tests.integration","","unknown","","","test_plugins","",""
"Test that async replication fails over correctly.","","test_async_replication_failover_in_main_cluster","tests.integration.ha_tests","","unknown","","","test_async_replication","",""
"Build and deploy two units of PostgreSQL in AWS, test backup and restore actions.","","test_backup_aws","tests.integration","","unknown","","","test_backups_aws","",""
"","","test_interruption_db_process[SIGTERM-/snap/charmed-postgresql/[0-9]*/usr/bin/patroni]","tests.integration.ha_tests","","unknown","","","test_self_healing","",""
"Deploy Mailman3 Core to test the 'db' relation.","","test_mailman3_core_db","tests.integration","","unknown","","","test_db","",""
"","","test_removing_stereo_primary","tests.integration.ha_tests","","unknown","","","test_scaling","",""
"Test that an application can connect to different clusters of the same database.","","test_an_application_can_connect_to_multiple_database_clusters","tests.integration.new_relations","","unknown","","","test_new_relations_1","",""
"","","test_nextcloud_db_blocked","tests.integration.new_relations","","unknown","","","test_new_relations_2","",""
"Build the charm and deploy it.","","test_deploy_active","tests.integration","","unknown","","","test_tls","",""
"","","test_exporter_is_up[2]","tests.integration","","unknown","","","test_charm","",""
"","","test_upgrade_from_edge","tests.integration.ha_tests","","unknown","","","test_upgrade","",""
"Test that TLS is enabled when relating to the TLS Certificates Operator.","","test_tls_enabled","tests.integration","","unknown","","","test_tls","",""
"A forceful restart with deleted data and without transaction logs (forced clone).","","test_forceful_restart_without_data_and_transaction_logs","tests.integration.ha_tests","","unknown","","","test_self_healing","",""
"","","test_removing_unit[roles0]","tests.integration.ha_tests","","unknown","","","test_scaling_three_units_async","",""
"","","test_removing_unit[roles2]","tests.integration.ha_tests","","unknown","","","test_scaling_three_units","",""
"Build, deploy two units of PostgreSQL and do backup in GCP. Then, write new data into DB, switch WAL file and test point-in-time-recovery restore action.","","test_pitr_backup_gcp","tests.integration","","unknown","","","test_backups_pitr_gcp","",""
"Verifies that database units with attached storage correctly repurpose storage.

    It is not enough to verify that Juju attaches the storage. Hence test checks that the
    postgresql properly uses the storage that was provided. (ie. doesn't just re-sync everything
    from primary, but instead computes a diff between current storage and primary storage.)
    ","","test_storage_re_use","tests.integration.ha_tests","","unknown","","","test_self_healing","",""
"","","test_fail_and_rollback","tests.integration.ha_tests","","unknown","","","test_upgrade","",""
"Test that relation data, like connection data, is updated correctly when scaling.","","test_relation_data_is_updated_correctly_when_scaling","tests.integration.new_relations","","unknown","","","test_new_relations_1","",""
"","","test_removing_unit[roles3]","tests.integration.ha_tests","","unknown","","","test_scaling_three_units","",""
"","","test_removing_unit[roles1]","tests.integration.ha_tests","","unknown","","","test_scaling_three_units_async","",""
"Test that the charm can handle invalid and valid backup configurations.","","test_invalid_config_and_recovery_after_fixing_it","tests.integration","","unknown","","","test_backups_gcp","",""
"Build, deploy two units of PostgreSQL and do backup in AWS. Then, write new data into DB, switch WAL file and test point-in-time-recovery restore action.","","test_pitr_backup_aws","tests.integration","","unknown","","","test_backups_pitr_aws","",""
"This tests checks that a cluster recovers from a full cluster restart.

    The test can be called a full cluster crash when the signal sent to the OS process
    is SIGKILL.
    ","","test_full_cluster_restart[SIGTERM-postgres]","tests.integration.ha_tests","","unknown","","","test_self_healing","",""
"Test that async replication works when scaling the clusters.","","test_scaling","tests.integration.ha_tests","","unknown","","","test_async_replication","",""
"Test data is replicated to new units after a scale up.","","test_scale_down_and_up","tests.integration","","unknown","","","test_charm","",""
"Test updating from stable channel.","","test_upgrade_from_stable","tests.integration.ha_tests","","unknown","","","test_upgrade_from_stable","",""
"","","test_switchover_sync_standby","tests.integration","","unknown","","","test_charm","",""
"Test that is possible to restore a backup to another PostgreSQL cluster.","","test_restore_on_new_cluster","tests.integration","","unknown","","","test_backups_gcp","",""
"Recreates the cluster from storage volumes.","","test_cluster_restore","tests.integration.ha_tests","","unknown","","","test_restore_cluster","",""
"","","test_filter_out_degraded_replicas","tests.integration.new_relations","","unknown","","","test_new_relations_1","",""
"","","test_interruption_db_process[SIGKILL-postgres]","tests.integration.ha_tests","","unknown","","","test_self_healing","",""
"Completely cut and restore network (situation when the unit IP doesn't change).","","test_network_cut_without_ip_change","tests.integration.ha_tests","","unknown","","","test_self_healing","",""
"Test that async replication fails back correctly.","","test_async_replication_failover_in_secondary_cluster","tests.integration.ha_tests","","unknown","","","test_async_replication","",""
"","","test_invalid_extra_user_roles","tests.integration.new_relations","","unknown","","","test_new_relations_1","",""
"Deploy both charms (application and database) to use in the tests.","","test_deploy_charms","tests.integration.relations","","unknown","","","test_relations","",""
"","","test_majority","tests.integration.ha_tests","","unknown","","","test_synchronous_policy","",""
"Test that's possible to change PostgreSQL parameters.","","test_postgresql_parameters_change","tests.integration","","unknown","","","test_charm","",""
"","","test_data_integrator_creds_keep_on_working","tests.integration.ha_tests","","unknown","","","test_async_replication","",""
"","","test_database_is_up[0]","tests.integration","","unknown","","","test_charm","",""
"Build and deploy three unit of PostgreSQL.","","test_build_and_deploy","tests.integration.ha_tests","","unknown","","","test_replication","",""
"Test that the pre-upgrade-check action runs successfully.","","test_pre_upgrade_check","tests.integration.ha_tests","","unknown","","","test_upgrade","",""
"Test data persists through a primary deletion.","","test_persist_data_through_primary_deletion","tests.integration","","unknown","","","test_charm","",""
"Simple test to ensure that the PostgreSQL and application charms get deployed.","","test_deploy_stable","tests.integration.ha_tests","","unknown","","","test_upgrade_from_stable","",""
"Test that two different application connect to the database with different credentials.","","test_two_applications_doesnt_share_the_same_relation_data","tests.integration.new_relations","","unknown","","","test_new_relations_1","",""
"","","test_exporter_is_up[0]","tests.integration","","unknown","","","test_charm","",""
"Test application deploy in dirty environment with garbage storage from another application.","","test_app_resources_conflicts_v2","tests.integration.ha_tests","","unknown","","","test_smoke","",""
"","","test_settings_are_correct[1]","tests.integration","","unknown","","","test_charm","",""
"Test that a relation with no database name doesn't block the charm.","","test_relation_with_no_database_name","tests.integration.new_relations","","unknown","","","test_new_relations_1","",""
"","","test_removing_unit[roles4]","tests.integration.ha_tests","","unknown","","","test_scaling_three_units_async","",""
