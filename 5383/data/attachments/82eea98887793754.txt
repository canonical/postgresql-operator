[32mINFO    [0m integration.ha_tests.test_async_replication:test_async_replication.py:504 starting continuous writes to the database
[32mINFO    [0m integration.ha_tests.test_async_replication:test_async_replication.py:507 checking whether writes are increasing
[32mINFO    [0m integration.ha_tests.helpers:helpers.py:103 Initial writes {'testing.postgresql-0': 3, 'testing.postgresql-2': 3}
[32mINFO    [0m integration.ha_tests.helpers:helpers.py:113 Retry writes {'testing.postgresql-0': 4, 'testing.postgresql-2': 4}
[32mINFO    [0m integration.ha_tests.test_async_replication:test_async_replication.py:511 Standby leader: postgresql-2
[32mINFO    [0m integration.ha_tests.test_async_replication:test_async_replication.py:512 deleting the standby leader
[32mINFO    [0m juju.model:__init__.py:3254 Waiting for model:
  postgresql/0 [executing] active: 
  postgresql/1 [executing] active: 
  postgresql/2 [executing] active: Standby
[32mINFO    [0m juju.model:__init__.py:3254 Waiting for model:
  postgresql/0 [idle] active: 
  postgresql/2 [executing] active: 
[32mINFO    [0m integration.ha_tests.test_async_replication:test_async_replication.py:525 Ensure continuous_writes after the crashed unit
[32mINFO    [0m integration.ha_tests.helpers:helpers.py:103 Initial writes {'testing.postgresql-0': 33, 'testing.postgresql-2': 33}
[32mINFO    [0m integration.ha_tests.helpers:helpers.py:113 Retry writes {'testing.postgresql-0': 36, 'testing.postgresql-2': 36}
[32mINFO    [0m integration.ha_tests.test_async_replication:test_async_replication.py:530 checking whether no writes were lost